{"version":3,"sources":["components/Header.js","components/NewSquare.js","components/Button.js","components/NewBoard.js","components/Start.js","App.js","reportWebVitals.js","index.js"],"names":["Header","text","gameState","winner","currentPlayer","name","icon","className","NewSquare","currentSquare","onSquareClick","style","onClick","id","value","Button","onHome","onReset","NewBoard","changePlayer","setGameState","setWinner","playerNames","useState","win","board","setBoard","clickSquare","forEach","square","map","useEffect","winningSquares","winConditions","a","b","c","winningIcon","found","Object","values","find","player","findWinner","array","includes","every","color","Start","onStart","playerOneName","setPlayerOneName","playerTwoName","setPlayerTwoName","onSubmit","e","preventDefault","alert","type","placeholder","maxLength","onChange","target","form","App","playerOne","playerTwo","setPlayerNames","setCurrentPlayer","useCallback","names","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd05796e.chunk.js","sourcesContent":["const Header = ({ gameState, winner, currentPlayer }) => {\n    \n    let text;\n\n    switch (gameState) {\n        case 'start':\n            text = `Tic Tac Toe`\n            break;\n        case 'inGame':\n            text = `${currentPlayer.name}'s Turn (${currentPlayer.icon})`\n            break;\n        case 'Game-won':\n            text = `${winner} wins!`\n            break;\n        case 'draw':\n            text = `Draw!`\n            break;\n        default:\n            text = 'Error!'\n            break;\n    } \n\n    return (\n        <div className=\"header\">\n            <h1>{text}</h1>\n        </div>\n    )\n}\n\nexport default Header\n","const NewSquare = ({ currentSquare, onSquareClick, style }) => {\n\n    return (\n        <div className=\"square\" onClick={()=>onSquareClick(currentSquare.id)} style={style}>\n            <h1>{currentSquare.value}</h1>\n        </div>\n    )\n}\n\nexport default NewSquare\n","import React from 'react'\n\nconst Button = ({ text, onHome, onReset }) => {\n\n    if (text === \"Home\") {\n        return (\n            <button onClick={onHome}>\n                {text}\n            </button>\n        );\n    } else if (text === \"Reset\") {\n        return (\n            <button onClick={onReset}>\n                {text}\n            </button>\n        );\n    } else {\n        return (\n            <button >\n                {text}\n            </button>\n        );\n    }\n}\n\nexport default Button\n","import { useState, useEffect } from 'react'\nimport NewSquare from './NewSquare'\nimport Button from './Button';\n\nconst NewBoard = ({ currentPlayer, changePlayer, setGameState, setWinner, gameState, playerNames, onHome }) => {\n    const [board, setBoard] = useState([\n        { id: 1, value: '', win: false },\n        { id: 2, value: '', win: false },\n        { id: 3, value: '', win: false },\n        { id: 4, value: '', win: false },\n        { id: 5, value: '', win: false },\n        { id: 6, value: '', win: false },\n        { id: 7, value: '', win: false },\n        { id: 8, value: '', win: false },\n        { id: 9, value: '', win: false }\n    ]);\n\n    const clickSquare = (id) => {\n        if (gameState === 'inGame') {\n            board.forEach((square) => {\n                if (square.id === id) {\n                    if (square.value === '') {\n                        setBoard(board.map((square) => square.id === id ? { ...square, value: currentPlayer.icon } : square));\n                        changePlayer();\n                    } else {\n                        return;\n                    }\n                }\n            })\n        }\n    }\n\n    const onReset = () => {\n        setBoard([\n            { id: 1, value: '', win: false },\n            { id: 2, value: '', win: false },\n            { id: 3, value: '', win: false },\n            { id: 4, value: '', win: false },\n            { id: 5, value: '', win: false },\n            { id: 6, value: '', win: false },\n            { id: 7, value: '', win: false },\n            { id: 8, value: '', win: false },\n            { id: 9, value: '', win: false }\n        ])\n        setGameState('inGame')\n    }\n\n    useEffect(() => {\n        let winner=null;\n        let winningSquares  = [];\n        \n        const findWinner = (winningIcon) => {\n            const playerNamesArray = Object.values(playerNames);\n            const found = playerNamesArray.find(player => player.icon === winningIcon);\n            winner = found.name;\n        }\n\n        const assignWinSquares = (array) => {\n            setBoard(\n                board.map((square) => \n                    array.includes(square) ? { ...square, win:true } : square\n                )\n            )\n        }\n\n        const winConditions = (a,b,c) => {\n            if (board[a].value === board[b].value\n                && board[a].value === board[c].value\n                && board[a].value !== '') {\n                    findWinner(board[a].value)\n                    winningSquares = [board[a], board[b], board[c]]\n                    if (gameState === 'inGame') {\n                        assignWinSquares(winningSquares)\n                    }\n                    return true;\n                }\n        }\n\n        const drawGame = (square) => square.value !== '';\n\n        if(winConditions(0,1,2) || winConditions(3,4,5) || winConditions(6,7,8) || winConditions(0,3,6) || winConditions(1,4,7) || winConditions(2,5,8) || winConditions(0,4,8) || winConditions(2,4,6)) {\n            setGameState('Game-won')\n            setWinner(winner)\n        } else if (board.every(drawGame)) {\n            setGameState('draw')\n        } else {\n            return;\n        }\n    }, [board, setWinner, setGameState, playerNames, gameState])\n\n    return (\n        <div id=\"game\">\n            <div id=\"board\">\n                {board.map((square) => (\n                    square.win ? <NewSquare key={square.id} currentSquare={square} onSquareClick={clickSquare} style={{ color: \"tomato\" }}/> : <NewSquare key={square.id} currentSquare={square} onSquareClick={clickSquare} />\n                ))}\n            </div>\n            <div className=\"btns\"><Button text=\"Home\" onHome={onHome}/> <Button text=\"Reset\" onReset={onReset}/></div>\n        </div>\n    )\n}\n\nexport default NewBoard\n","import { useState } from 'react'\n\nconst Start = ( { onStart, setGameState } ) => {\n    const [playerOneName, setPlayerOneName] = useState('');\n    const [playerTwoName, setPlayerTwoName] = useState('');\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        if(!playerOneName || !playerTwoName) {\n            alert('Please enter names for both players')\n            return;\n        }\n\n        onStart({ playerOneName, playerTwoName })\n        setGameState('inGame')\n    }\n\n    return (\n        <form id=\"start-page\" onSubmit={onSubmit}>\n            <div className=\"form-control\">\n                <label>Player 1:</label>\n                <input type=\"text\" \n                placeholder=\"Name\"\n                maxLength=\"10\"\n                value={playerOneName}\n                onChange={(e) => setPlayerOneName(e.target.value)} />\n            </div>\n            <div className=\"form-control\">\n                <label>Player 2:</label>\n                <input type=\"text\"\n                placeholder=\"Name\"\n                maxLength=\"10\"\n                value={playerTwoName}\n                onChange={(e) => setPlayerTwoName(e.target.value)} />\n            </div>\n            <button type=\"submit\" form=\"start-page\">Start</button>\n        </form>\n    )\n}\n\nexport default Start\n","import { useState, useCallback, useEffect } from 'react'\nimport Header from './components/Header'\nimport NewBoard from './components/NewBoard';\nimport Start from './components/Start';\n\nfunction App() {\n  const [gameState, setGameState] = useState('start');\n  const [winner, setWinner] = useState(null)\n  const [playerNames, setPlayerNames] = useState({playerOne: {name: '', icon: 'X'}, playerTwo: {name: '', icon: 'O'}});\n  const [currentPlayer, setCurrentPlayer] = useState({});\n\n  const changePlayer = useCallback(\n    () => {\n      if (gameState !== 'inGame') {\n        return;\n      }\n       else if (currentPlayer === playerNames.playerOne) {\n          setCurrentPlayer (playerNames.playerTwo)\n      } else {\n          setCurrentPlayer(playerNames.playerOne)\n      }\n    },\n    [gameState, currentPlayer, playerNames],\n  )\n\n  useEffect (() => {\n    setCurrentPlayer(playerNames.playerOne)\n  },[playerNames])\n\n  const namePlayers = (names) => {\n    setPlayerNames({playerOne: {name: names.playerOneName, icon: 'X'}, playerTwo: {name: names.playerTwoName, icon: 'O'}}); \n  }\n\n  const onHome = () => {\n    setGameState('start')\n  }\n\n  if (gameState === 'start') {\n      return (\n        <div className=\"container\">\n          <Header gameState={gameState} winner={winner} currentPlayer={currentPlayer} playerNames={playerNames}/>\n          <Start onStart={namePlayers} setGameState={setGameState}/>\n        </div>\n      );\n    } else if (gameState === 'inGame') {\n      return (\n        <div className=\"container\">\n          <Header gameState={gameState} winner={winner} currentPlayer={currentPlayer} playerNames={playerNames}/>\n          <NewBoard currentPlayer={currentPlayer} changePlayer={changePlayer} setGameState={setGameState} setWinner={setWinner} gameState={gameState} playerNames={playerNames} onHome={onHome}/>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"container\">\n          <Header gameState={gameState} winner={winner} currentPlayer={currentPlayer} playerNames={playerNames}/>\n          <NewBoard currentPlayer={currentPlayer} changePlayer={changePlayer} setGameState={setGameState} setWinner={setWinner} gameState={gameState} playerNames={playerNames} onHome={onHome}/>\n        </div>\n      );\n    }\n  } \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}